# features must be integer
df['column1'] = cell_df['column1'].astype('int') # change class to interger
feature_df = df[['column1', 'column2',...]]

# create X
X = np.asarray(feature_df)

# create Y
df['outcome'] = cell_df['outcome'].astype('int')
y = np.asarray(cell_df['outcome'])

# create a test and train data set
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

# create SVM
from sklearn import svm
model = svm.SVC(kernel='rbf')
model.fit(X_train, y_train)
# kernel can be different functions: Linear, Polynomial, Radial basis function (RBF), Sigmoid

#make prediction
yhat = model.predict(X_test)

# evaluation
from sklearn.metrics import classification_report, confusion_matrix
import itertools

#compute confusion matrix
cnf_matrix = confusion_matrix(y_test, yhat, labels=[2,4])

# report F 1 Score
print (classification_report(y_test, yhat))
f1_score(y_test, yhat, average='weighted') 

# Jaccard Index
from sklearn.metrics import jaccard_score
jaccard_score(y_test, yhat,pos_label=2)


