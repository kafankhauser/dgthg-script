
# define predictors
X = np.asarray(churn_df[['column1', 'column2',....]])

# normalize the features
from sklearn import preprocessing
X = preprocessing.StandardScaler().fit(X).transform(X)

# define outcome
y = np.asarray(churn_df['outcome_column'])

# create test and train data set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

# Create logistic Regression model
from sklearn.linear_model import LogisticRegression
LR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train)

# Prediction
yhat = LR.predict(X_test)

# Evaluation - Jaccard Index
from sklearn.metrics import jaccard_score
jaccard_score(y_test, yhat,pos_label=0)

# Evaluation - Confusion Matrix
from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(y_test, yhat, labels=[1,0]))

# Recall, Precision, F1 Score
print(classification_report(y_test, yhat))


